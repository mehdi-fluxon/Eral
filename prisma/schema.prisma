// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("MYSQL_URL")
}

model Contact {
  id                String    @id @default(cuid())
  name              String
  firstName         String?
  lastName          String?
  email             String?
  jobTitle          String?
  linkedinUrl       String?
  referrer          String?
  crmId             String?
  cadence           String    @default("3_MONTHS")
  lastTouchDate     DateTime  @default(now())
  nextReminderDate  DateTime?
  generalNotes      String?   @db.Text
  customFields      Json?
  lastContactAt     DateTime?

  companies         ContactCompany[]
  teamMembers       ContactTeamMember[]
  labels            ContactLabel[]
  interactions      Interaction[]
  followUps         FollowUp[]

  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@index([nextReminderDate])
  @@index([email])
  @@index([name])
  @@index([lastName])
  @@index([jobTitle])
  @@map("contacts")
}

model ContactCompany {
  id         String   @id @default(cuid())
  contactId  String
  companyId  String
  
  contact    Contact  @relation(fields: [contactId], references: [id], onDelete: Cascade)
  company    Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  
  createdAt  DateTime @default(now())
  
  @@unique([contactId, companyId])
  @@index([contactId])
  @@index([companyId])
  @@map("contact_companies")
}

model ContactTeamMember {
  id           String     @id @default(cuid())
  contactId    String
  teamMemberId String

  contact      Contact    @relation(fields: [contactId], references: [id], onDelete: Cascade)
  teamMember   TeamMember @relation(fields: [teamMemberId], references: [id], onDelete: Cascade)

  createdAt    DateTime   @default(now())

  @@unique([contactId, teamMemberId])
  @@index([contactId])
  @@index([teamMemberId])
  @@map("contact_team_members")
}

model Label {
  id              String         @id @default(cuid())
  name            String         @unique
  color           String?
  pipedriveId     Int?           @unique

  contacts        ContactLabel[]

  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@map("labels")
}

model ContactLabel {
  id        String   @id @default(cuid())
  contactId String
  labelId   String

  contact   Contact  @relation(fields: [contactId], references: [id], onDelete: Cascade)
  label     Label    @relation(fields: [labelId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([contactId, labelId])
  @@index([contactId])
  @@index([labelId])
  @@map("contact_labels")
}

model Company {
  id           String           @id @default(cuid())
  name         String
  website      String?
  industry     String?
  size         String?
  customFields Json?

  contacts     ContactCompany[]

  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  @@map("companies")
}

model Interaction {
  id                  String     @id @default(cuid())
  contactId           String
  teamMemberId        String
  type                String
  content             String     @db.Text
  interactionDate     DateTime   @default(now())
  pipedriveActivityId Int?
  customFields        Json?

  contact             Contact    @relation(fields: [contactId], references: [id], onDelete: Cascade)
  teamMember          TeamMember @relation(fields: [teamMemberId], references: [id])

  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt

  @@index([contactId, interactionDate])
  @@index([pipedriveActivityId])
  @@map("interactions")
}

model TeamMember {
  id           String               @id @default(cuid())
  name         String
  email        String               @unique
  userId       String?              @unique
  contacts     ContactTeamMember[]
  interactions Interaction[]
  user         User?                @relation(fields: [userId], references: [id])
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt

  @@map("team_members")
}

model FollowUp {
  id        String   @id @default(cuid())
  contactId String
  dueDate   DateTime
  status    String   @default("PENDING")
  cadence   String?
  notes     String?  @db.Text

  contact   Contact  @relation(fields: [contactId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([contactId])
  @@index([status, dueDate])
  @@map("follow_ups")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  teamMember    TeamMember?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}


